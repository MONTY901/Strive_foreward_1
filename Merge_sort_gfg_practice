class Solution {

    void mergeSort(int arr[], int l, int r) {
        // code here
        if (l >= r) return; //base condition
        
        int mid = (l + r) / 2;
        
        mergeSort(arr, l, mid); // left half
        
        mergeSort(arr, mid + 1, r); // right half
        
        merge(arr, l, mid, r);
    }
    
    void merge(int arr[], int low, int mid, int high) {
        List<Integer> temp = new ArrayList<>();
        int left = low;
        int right = mid + 1;
        
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left++]);
            } else {
                temp.add(arr[right++]);
            }
        }
        
        while (left <= mid) {
            temp.add(arr[left++]);
        }
        
        while (right <= high) {
            temp.add(arr[right++]);
        }
        
        for (int j = low; j <= high; j++) {
            arr[j] = temp.get(j - low);
        } 
    }
}
